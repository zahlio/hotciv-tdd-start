package hotciv.standard;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import hotciv.common.CityImpl;
import hotciv.common.GameImpl;
import hotciv.common.UnitImpl;
import hotciv.framework.City;
import hotciv.framework.Game;
import hotciv.framework.GameConstants;
import hotciv.framework.Player;
import hotciv.framework.Position;
import hotciv.framework.Tile;
import hotciv.framework.Unit;
import hotciv.variants.AlphaCivAging;
import hotciv.variants.AlphaCivFactory;
import hotciv.variants.AlphaCivUnitAction;
import hotciv.variants.AlphaCivWorldLayout;

import org.junit.Before;
import org.junit.Test;

/** Skeleton class for AlphaCiv test cases 

   This source code is from the book 
     "Flexible, Reliable Software:
       Using Patterns and Agile Development"
     published 2010 by CRC Press.
   Author: 
     Henrik B Christensen 
     Department of Computer Science
     Aarhus University
   
   Please visit http://www.baerbak.com/ for further information.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/
public class TestAlphaCiv {
  private Game game;
  /** Fixture for alphaciv testing. */
  @Before
  public void setUp() {
    game = new GameImpl(new AlphaCivAging(), new AlphaCivUnitAction(), new AlphaCivWorldLayout(), new AlphaCivFactory());
  }
  
  @Test
  public void redShouldStart(){
	Player p = game.getPlayerInTurn();
	assertEquals("Red player should start", Player.RED, p);
	assertNotNull("Red player should never be null at start", p);
  }
  
  @Test
  public void endTurnShouldChangePlayer(){
	  game.endOfTurn();
	  Player p = game.getPlayerInTurn();
	  assertEquals("Player should now be blue", Player.BLUE, p);
	  game.endOfTurn();
	  Player p2 = game.getPlayerInTurn();
	  assertEquals("Player should now be red again", Player.RED, p2);
	  
  }
  
  @Test
  public void shouldHaveOceans(){
	  Tile t = game.getTileAt(new Position(0,1));
	  assertEquals("Should have oceans at (0,1)", GameConstants.OCEANS, t.getTypeString());
  }
  
  @Test
  public void shouldHaveHills(){
	  Tile t = game.getTileAt(new Position(1,0));
	  assertEquals("Should have Hills at (1,0)", GameConstants.HILLS, t.getTypeString());
  }
  
  @Test
  public void shouldHaveMountains(){
	  Tile t = game.getTileAt(new Position(2,2));
	  assertEquals("Should have mountains at (2,2)", GameConstants.MOUNTAINS, t.getTypeString());
  }
  
  @Test
  public void positionOutsideWorldShouldReturnFalse(){
	  assertFalse("This should be outside the world", ((GameImpl)game).isInsideWorld(new Position(17,4)));
  }
  
  @Test
  public void shouldHaveRedArcher(){
	  Position p = new Position(2,0);
	  Unit u = game.getUnitAt(p);
	  assertEquals("There should be an Archer at (2,0)", GameConstants.ARCHER, u.getTypeString());
	  assertEquals("Archer should be owned by Red", Player.RED, u.getOwner());
  }
  
  @Test
  public void shouldHaveBlueLegion(){
	  Position p = new Position(3,2);
	  Unit u = game.getUnitAt(p);
	  assertEquals("There should be an Legion at (3,2)", GameConstants.LEGION, u.getTypeString());
	  assertEquals("Archer should be owned by Blue", Player.BLUE, u.getOwner());
  }
  
  @Test
  public void shouldHaveRedSettler(){
	  Position p = new Position(4,3);
	  Unit u = game.getUnitAt(p);
	  assertEquals("There should be an Settler at (4,3)", GameConstants.SETTLER, u.getTypeString());
	  assertEquals("Archer should be owned by Red", Player.RED, u.getOwner());
  }
  
  @Test
  public void noUnitIshere(){
	  assertFalse("There is no unit to move here", game.moveUnit(new Position(7,6), new Position(6, 7)));
  }
  
  @Test
  public void unitShouldBeOwnedByCurrentPlayer(){
	  assertFalse("Cannot move blue unit", game.moveUnit(new Position(3,2), new Position(6, 7)));
  }
  
  @Test
  public void ShouldNotBeAbleToMoveOnOcean(){
	  assertFalse("You cannot move on oceans", game.moveUnit(new Position(2,0), new Position(0, 1)));
  }
  
  @Test
  public void ShouldNotBeAbleToMoveOnMountains(){
	  assertFalse("you cannot move on mountains", game.moveUnit(new Position(2,0), new Position(2, 2)));
  }
    
  @Test
  public void ToShouldbeInsideWorld(){
	  assertFalse("To should be inside world", game.moveUnit(new Position(2,0), new Position(17, 5)));
  }
  
  @Test
  public void ShouldBeValidMove(){
	  assertTrue("This should be a valid move", ((GameImpl)game).canMoveDistance(new Position(2,0), new Position(3,1)));
  }
  
  @Test
  public void MoveShouldBeTooFar(){
	  assertFalse("Should not be able to move this far", ((GameImpl)game).canMoveDistance(new Position(2,0), new Position(2,2)));
  }
  
  @Test
  public void UnitHasMovedAndReset(){
	  game.moveUnit(new Position(2,0), new Position(2,1));
	  Unit u = game.getUnitAt(new Position(2,1));
	  assertEquals("Unit moveCount should be 0", 0, u.getMoveCount());
	  assertFalse("This unit cannot move", game.moveUnit(new Position(2,1), new Position(3,1)));
	  Utility.playRounds(game,1);
	  assertEquals("Unit moveCount should be 1 again", 1, u.getMoveCount());
	  
  }
  
  @Test
  public void AttackerShouldWinAndMoveToLocation(){
	  Position red = new Position(2,0);
	  game.getUnits().put(new Position(3,1), new UnitImpl(GameConstants.LEGION, Player.BLUE));
	  Position blue = new Position(3,1);
	  game.moveUnit(red, blue);
	  Unit u = game.getUnitAt(blue);
	  assertEquals("3,2 should be owned by red now", Player.RED, u.getOwner());
  }
  
  @Test
  public void TheRedProductionShouldBe6(){
	  CityImpl c = (CityImpl) game.getCityAt(new Position(1,1));
	  Utility.playRounds(game,1);
	  assertEquals("The production of the red city should be 6", 6, c.getResources());
  }
  
  @Test
  public void ThereShouldBeARedCityAt(){
	  Position p = new Position(1,1);
	  City c = game.getCityAt(p);
	  assertEquals("There should be a Red city at (1,1)", Player.RED, c.getOwner());
  }
  
  @Test
  public void ThereShouldABlueCityAt(){
	  Position p = new Position(4,1);
	  City c = game.getCityAt(p);
	  assertEquals("There should be a Blue city at (4,1)", Player.BLUE, c.getOwner());
  }
  
  //DISSE METODER SKAL ÆNDRES
  @Test
  public void ShouldProduceArcher(){
	  Position p = new Position(1,1);
	  Utility.playRounds(game,2);
	  ((GameImpl) game).produceUnit(GameConstants.ARCHER,p);
	  Unit u = game.getUnitAt(p);
	  assertEquals("A new archer should have been created at (1,1)", GameConstants.ARCHER, u.getTypeString());
	  assertEquals("The archer should be owned by the current player", game.getPlayerInTurn(), u.getOwner());
  }
  
  @Test
  public void ShouldProduceLegion(){
	  Position p = new Position(1,1);
	  Utility.playRounds(game,3);
	  ((GameImpl) game).produceUnit(GameConstants.LEGION,p);
	  Unit u = game.getUnitAt(p);
	  assertEquals("A new legion should have been created at (1,1)", GameConstants.LEGION, u.getTypeString());
	  assertEquals("The legion should be owned by the current player", game.getPlayerInTurn(), u.getOwner());
  }
  
  @Test
  public void ShouldProduceSettler(){
	  Position p = new Position(1,1);
	  Utility.playRounds(game,5);
	  ((GameImpl) game).produceUnit(GameConstants.SETTLER,p);
	  Unit u = game.getUnitAt(p);
	  assertEquals("A new legion should have been created at (1,1)", GameConstants.SETTLER, u.getTypeString());
	  assertEquals("The legion should be owned by the current player", game.getPlayerInTurn(), u.getOwner());
  }
  
  @Test
  public void AccumulatedEnoughAndSet(){
	  Position p = new Position(1,1);
	  Utility.playRounds(game,8);
	  CityImpl c = (CityImpl) game.getCityAt(p);
	  assertEquals("The production should be 48", 48, c.getResources());
	  for(int i=0;i<4;i++){
		  ((GameImpl)game).produceUnit(GameConstants.ARCHER, p);
	  }
	  Unit u = game.getUnitAt(new Position(1,2));
	  assertEquals("There should be an Archer at (1,2)", GameConstants.ARCHER, u.getTypeString());
  }
  
  @Test
  public void StartAgeShouldbe4000BC(){
	  assertEquals("Starting age should be -4000", -4000, game.getAge());
  }
  
  @Test
  public void RedShouldTheBeWinnerByYear3000BC(){
	  Utility.playRounds(game,10);
	  assertEquals("Red should have won by now", Player.RED, game.getWinner());
  }
    
}